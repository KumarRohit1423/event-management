// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  ORGANISER
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  organizedEvents       Event[]                @relation("organizedEvents")
  participatedEvents    Event[]                @relation("participatedEvents")
  Registration          Registration[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Event {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String
  startDate     DateTime
  endDate       DateTime
  location      String
  organizer     User           @relation("organizedEvents", fields: [organizerId], references: [id])
  organizerId   String
  participants  User[]         @relation("participatedEvents")
  tickets       Ticket[]
  registrations Registration[]
  categories    Category[]
}

model Ticket {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  quantity      Int
  eventId       String
  event         Event          @relation(fields: [eventId], references: [id])
  registrations Registration[]
}

model Registration {
  id        String   @id @default(cuid())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  eventId   String
  Event     Event    @relation(fields: [eventId], references: [id])
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  events      Event[]
}

model Image {
  id       String @id @default(cuid())
  publicId String @unique
  format   String
  version  String
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ForgotPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
